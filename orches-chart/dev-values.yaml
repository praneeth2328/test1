app:
  replicaCount: 2

  image:
    name: 727231120957.dkr.ecr.us-west-2.amazonaws.com/data-science/orchestrator:592be69
    pullPolicy: IfNotPresent

  ports:
    containerPort: 5000
    protocol: TCP

  env:
    - name: SSE_ENV
      value: prod
    - name: GUNICORN_WORKERS
      value: "2"
    - name: TOKEN_VALIDATION_ENABLED
      value: "False"
    - name: DD_AGENT_HOST
      value: "datadog.datadog"
    - name: DD_PROFILING_ENABLED
      value: "True"
    - name: DD_TRACE_ENABLED
      value: "True"
    - name: DD_LOGS_INJECTION
      value: "True"
    - name: DD_TRACE_SAMPLE_RATE
      value: "1"


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1000

service:
  type: NodePort
  port: 5000
  protocol: TCP
  targetPort: 5000

ingress:
  enabled: false
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: pat-eks-dev-01
    alb.ingress.kubernetes.io/group.name: pat-eks-dev-01-group
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/subnets: subnet-0f1924af5ea95d5de, subnet-092f432699253df9c
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/inbound-cidrs: 10.0.0.0/8
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:901152784744:certificate/b386707e-5f69-41a4-b725-faaf7085af87
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS13-1-2-2021-06
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/tags: Env=dev
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=1800

  hosts:
    - host: api.dev.ai.umbrella.com
      paths:
        - path: /health-check
          pathType: Prefix
          serviceName: ai-orchestrator-service
          servicePort: 5000
        - path: /health
          serviceName: ai-orchestrator-service
          servicePort: 5000
        - path: /api/v2/execute
          serviceName: ai-orchestrator-service
          servicePort: 5000
  # hosts:
  #   host: api.dev.ai.umbrella.com
  #   paths:
  #     path: /health-check
  #     pathType: Prefix

resources: 
  limits:
    cpu: 3
    memory: 2500Mi
  requests:
    cpu: 1
    memory: 1800Mi

livenessProbe:
  httpGet:
    path: /health
    port: 5000
    scheme: HTTP
  initialDelaySeconds: 90
  periodSeconds: 300
  timeoutSeconds: 60
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  httpGet:
    path: /health
    port: 5000
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 120
  timeoutSeconds: 50
  failureThreshold: 4
  successThreshold: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Role configuration
role:
  create: false
  name: ai-orchestrator-role
  rules:
  
    

# # RoleBinding configuration
roleBinding:
  create: false
  name: ""
  roleName: ""
  subjects:
    - kind: ServiceAccount
      name: default
      namespace: default

# # NetworkPolicy configuration
networkPolicy:
  create: true
  name: ""
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: my-app
      ports:
        - protocol: TCP
          port: 5000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: my-app
      ports:
        - protocol: TCP
          port: 5000
